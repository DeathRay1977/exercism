(require '[clojure.string :as str])
(def strng "Word Up!")
(str/split strng #" ")
(def strng "Word    Up!")
(str/split strng #" ")
(str/split strng #"\W+")
(word-count "word))
(word-count "word"))
(rest(str/split strng #"\W+"))
(rest(rest(str/split strng #"\W+")))
(empty?(rest(rest(str/split strng #"\W+"))))
(load-file "word_count.clj")
(word-count "Too many freaks")
(word-count/word-count "Too many freaks")
(require '[clojure.string :as str])
(str/split "Too many freaks")
(str/split "Too many freaks" #"\W+")
(load-file "word_count.clj")
(rest ())
(load-file "word_count.clj")
(rest())
(rest(rest()))
(count(str/split "Too many freaks" #"\W+"))
m = {"word" 2 "ahoy" 2}
(def m {"word" 2 "ahoy" 2})
(m "word")
(+(m "word") 1)
(+(m "bozo") 1)
(cons(m "bozo" 1))
(cons("bozo" 1)m)
(cons m '("bozo" 1))
(cons m "bozo" 1)
(def hm {})
(assoc hm "word" 1)
(assoc hm "buzz" 1)
hm
(def hm {"word" 1})
hm
(cons "fizz" 1 hm)
(cons '("fizz" 1) hm)
hm
(hash-map(cons '("fizz" 1) hm))
(def hm {"word" 1})
(hash-map(cons '("fizz" 1) hm))
(hash-map(cons ("fizz" 1) hm))
(hash-map(cons "fizz" 1 hm))
hm
(assoc hm "up" 1)
(load-file "word_count.clj")
(load-file "word_count.clj")exit
exit
(#"\w+" "HELLO")
'(#"\w+" "HELLO")
(re-seq #"\w+" "HELLO")
(re-seq #"\w+" "HELLo")
(re-seq #"[A..Z] "HELLo")
"
]
)
(re-seq #"[A..Z]" "HELLo")
(re-seq #"[A-Z]" "HELLo")
(str #"[A-Z]" "HELLo")
(str (#"[A-Z]" "HELLo"))
(apply str (#"[A-Z]" "HELLo"))
(apply str '(#"[A-Z]" "HELLo"))
exit
